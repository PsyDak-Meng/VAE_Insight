# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SEp3YD3ya-U_FZxaBv4kxgK7VBW8sZ59
"""

import torch
import torch.nn as nn
import numpy as np

# Define the neural network model
class MultiLabelModel(nn.Module):
    def __init__(self, input_shape, output_shape):
        super(MultiLabelModel, self).__init__()
        self.fc1 = nn.Linear(input_shape, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 32)
        self.fc4 = nn.Linear(32, output_shape)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = torch.relu(self.fc3(x))
        x = torch.sigmoid(self.fc4(x))
        return x

# Create a single data point as a NumPy array
single_data_point = np.array([[73, 0, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 8, 0, 0, 6, 19, 19, 0, 1, 2]])

# Convert the NumPy array to a PyTorch tensor with the right format
X_test = torch.tensor(single_data_point, dtype=torch.float32)

model_path = "mymodel.pth"
# Load the model's state_dict from a file
loaded_state_dict = torch.load(model_path)

# Build the neural network model
model = MultiLabelModel(21, 25)
model.load_state_dict(loaded_state_dict)

# Make sure the model is in evaluation mode
model.eval()

# Use the loaded model for predictions
with torch.no_grad():
    y_test_pred = model(X_test)

symptom = {0: 'Injection site swelling', 1: 'Injection site pain', 2: 'Pyrexia', 3: 'Erythema', 4: 'Pain', 5: 'Pain in extremity', 6: 'Injection site warmth', 7: 'Headache', 8: 'Rash', 9: 'Peripheral swelling', 10: 'Nausea', 11: 'Dizziness', 12: 'Pruritus', 13: 'Skin warm', 14: 'Urticaria', 15: 'Chills', 16: 'Fatigue', 17: 'Vomiting', 18: 'Swelling', 19: 'Injection site pruritus', 20: 'Herpes zoster', 21: 'Myalgia', 22: 'Malaise', 23: 'Asthenia', 24: 'Others'}

# Convert the tensor to a list of values
y_test_pred_list = y_test_pred.squeeze().tolist()

# Create an empty list to store the formatted strings
predicted_symptoms_list = []

# Iterate through the y_test_pred_list and append the formatted strings to the predicted_symptoms_list
for idx, value in enumerate(y_test_pred_list):
    predicted_symptoms_list.append(f"{symptom[idx]} (index: {idx}, value: {value})")

# Create a list with the specified order of indices
index_order = [5, 16, 7, 21, 22, 2, 1, 3, 4, 15, 0, 10]

# Initialize the rearranged y_test_pred_list
rearranged_y_test_pred_list = []

# Rearrange the y_test_pred_list according to the index_order list
for index in index_order:
    rearranged_y_test_pred_list.append(y_test_pred_list[index])

# Initialize the rearranged predicted_symptoms_list
rearranged_predicted_symptoms_list = []

# Rearrange the predicted_symptoms_list according to the index_order list
for index in index_order:
    rearranged_predicted_symptoms_list.append(predicted_symptoms_list[index])

# Round the rearranged_y_test_pred_list values to 2 decimal places and format them as percentages
rearranged_y_test_pred_list = [f"{round(value * 100, 2):.2f}%" for value in rearranged_y_test_pred_list]

# Print the rearranged lists
print("Rearranged y_test_pred_list:")
print(rearranged_y_test_pred_list)

print("\nRearranged predicted_symptoms_list:")
for symptom in rearranged_predicted_symptoms_list:
    print(f"  - {symptom}")